/**
 * Google Maps Platform
 *
 * API Specification for Google Maps Platform
 *
 * The version of the OpenAPI document: 1.20.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapi.google.model


import com.fasterxml.jackson.annotation.JsonProperty

/**
 * - `DRIVING` (default) indicates calculation using the road network. - `BICYCLING` requests calculation for bicycling via bicycle paths & preferred streets (where available). - `TRANSIT` requests calculation via public transit routes (where available).  - `WALKING` requests calculation for walking via pedestrian paths & sidewalks (where available). 
 *
 * Values: DRIVING,BICYCLING,TRANSIT,WALKING
 */

enum class TravelMode(val value: kotlin.String) {

    @JsonProperty(value = "DRIVING")
    DRIVING("DRIVING"),

    @JsonProperty(value = "BICYCLING")
    BICYCLING("BICYCLING"),

    @JsonProperty(value = "TRANSIT")
    TRANSIT("TRANSIT"),

    @JsonProperty(value = "WALKING")
    WALKING("WALKING");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is TravelMode) "$data" else null

        /**
         * Returns a valid [TravelMode] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): TravelMode? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

